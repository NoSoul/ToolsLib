00.Factory
	定义一个用于创建对象的接口,让子类决定实例化哪一个类

01.AbstactFactory
	提供一个创建一系列相关或相互依赖对象的接口,而无需指定它们具体的类,具体实例化仍然在子类中

02.Singleton
	保证一个类仅有一个实例,并提供一个访问它的全局访问点

03.Builder
	将一个复杂对象的构建与它的表示分离,使得同样的构建过程可以创建不同的表示

04.Prototype
	用原型实例指定创建对象的种类,并且通过拷贝这些原型创建新的对象

05.Bridge
	将抽象部分与它的实现部分分离,使它们都可以独立地变化

06.Adapter
	将一个类的接口转换成客户希望的另外一个接口,使得原本由于接口不兼容而不能一起工作的那些类可以一起工作

07.Decorator
	动态地给一个对象添加一些额外的职责,就增加功能来说,相比生成子类更为灵活

08.Composite
	将对象组合成树形结构以表示“部分——整体”的层次结构.使得用户对单个对象和组合对象的使用具有一致性
	
09.Flyweigt
	运用共享技术有效地支持大量细粒度的对象,类似字母显示,将每处的字母以及每处的外观属性剥离

10.Facade
	为子系统中的一组接口提供一个一致的界面,定义了一个高层接口,这个接口使得这一子系统更加容易使用	

11.Proxy
	为其他对象提供一种代理以控制对这个对象的访问
	
12.Template
	定义一个操作中的算法的骨架,而将一些步骤延迟到子类中.使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤
	利用继承的特性，解决多个业务的逻辑算法步骤相同的问题
	在抽象基类中:1)定义并实现完整的逻辑算法过程 2)定义每一小步骤的公共接口
	在派生类中:1)实现每一个小步骤的具体实现

13.Strategy
	定义一系列的算法,把它们一个个封装起来,并且使它们可相互替换.本模式使得算法可独立于使用它的客户而变化.
	与Template模式解决问题类似，该模式利用组合（委托）多接口重用的方式来解决这类问题。
	新建的组合(委托)类:1)记录与之组合的是哪个类2）实现逻辑过程
	基类中:1）定义每个小步骤的公共接口
	派生类中:1）每个小步骤的具体实现

14.State
	在Strategy的基础上,利用有限状态自动机(FSM)解决多种状态,并将状态逻辑和动作实现分离.State模式可以通过组合(委托)类的指针,调用这个类的方法.允许一个对象在其内部状态改变时改变它的行为.对象看起来似乎修改了它的类

15.Observer
	定义对象间的一种一对多的依赖关系,当一个对象的状态发生改变时,所有依赖于它的对象都得到通知并被自动更新

16.Memento
	在不破坏封装性的前提下,捕获一个对象的内部状态,并在该对象之外保存这个状态.这样以后就可将该对象恢复到原先保存的状态

17.Mediator
	用一个中介对象来封装一系列的对象交互.中介者使各对象不需要显式地相互引用,从而使其耦合松散,而且可以独立地改变它们之间的交互

18.Command
	将一个请求封装为一个对象,从而使你可用不同的请求对客户进行参数化;对请求排队或记录请求日志,以及支持可撤消的操作

19.Visitor
	表示一个作用于某对象结构中的各元素的操作.它使你可以在不改变各元素的类的前提下定义作用于这些元素的新操作

20.Chain of Responsibility
	使多个对象都有机会处理请求,从而避免请求的发送者和接收者之间的耦合关系.将这些对象连成一条链,并沿着这条链传递该请求,直到有一个对象处理它为止

21. Iterator 
	提供一种方法顺序访问一个聚合对象中各个元素,而又不需暴露该对象的内部表示

22.Interpreter
	给定一个语言,定义它的文法的一种表示,并定义一个解释器,这个解释器使用该表示来解释语言中的句子
